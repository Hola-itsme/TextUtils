{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","background","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.53d7a3df.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//  import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n              \r\n              \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode===`light`?`dark`:`light`}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </nav>\r\n     </>\r\n    );\r\n}\r\nNavbar.propTypes={title:PropTypes.string,\r\n                  aboutText:PropTypes.string,}\r\n\r\nNavbar.defaultProps={title:\"set title here\",\r\naboutText:\"about \"     };\r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick=()=> {\r\n   // console.log(\"uppercase was clicked\"+text); no need\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to upperCase!\", \"Success\");\r\n  }\r\n  \r\n  const handleClearClick=()=> {\r\n    \r\n     let newText = \"\" ;\r\n     setText(newText)\r\n     props.showAlert(\"Text is Cleared!\", \"Success\");\r\n   }\r\n   const handleExtraSpaces=()=> {\r\n    let newText = text.split(/[ ]+/);\r\n     setText(newText.join(\" \"));\r\n     props.showAlert(\"ExtraSpaces  removed!\", \"Success\");\r\n   }\r\n  const handleLowClick=()=> {\r\n    \r\n     let newText = text.toLowerCase();\r\n     setText(newText)\r\n     props.showAlert(\"Converted to lowerCase!\", \"Success\");\r\n   }\r\n\r\n  const handleOnChange=(event) => {\r\n    //console.log(\"On Change\"); no need\r\n    setText(event.target.value);\r\n    \r\n  }\r\n  \r\n  \r\n  const [text, setText] = useState(\"\");\r\n  //setText(\"nrew text\");\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode===`dark`?`white`:`#042743`}}>\r\n      <h1 >{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\"  value={text} onChange={handleOnChange} style={{background:props.mode===`dark`?`grey`:`white`,color:props.mode===`dark`?`white`:`#042743`}} id=\"mybox\" rows=\"12\" ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleUpClick}>Convet To Uppercase</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleLowClick}>Convet To Lowercase </button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleClearClick}>Clear Text </button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleExtraSpaces}>Remove Extra Space </button>\r\n     \r\n    </div>\r\n    <div className=\"container my-3\" style={{color:props.mode===`dark`?`white`:`#042743`}}>\r\n      <h2>Your Text Summary</h2>\r\n      <p> {text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008* text.split(\" \").length} Minutes Read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter something in the textbox Above to Preview here \"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n  }\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n          const lower = word.toLowerCase();\r\n          return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n       props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)} </strong>:{props.alert.msg}\r\n            \r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n//  import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //dark mode is enabled or not!\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert = (message, type)=>{\n        setAlert({\n          msg:message,\n          type:type\n})\n setTimeout(() => {\n   setAlert(null);\n }, 2000);\n  }\n  const toggleMode= () =>{\n    if(mode ==='light'){\n      setMode('dark');\n      document.body.style.background ='#042743';\n      showAlert(\" Dark Mode has been Enabled\", \" success\");\n      document.title=\"TextUtils-Dark Mode\";\n    }\n    else{\n        setMode('light');\n        document.body.style.background ='white';\n        showAlert(\" Light Mode has been Enabled\", \"success\");\n        document.title=\"TextUtils-Light Mode\";\n    }\n    \n  }\n  return (\n    <>\n     {/* <Router>  */}\n    <Navbar title=\"Textutils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n    {/* <Router> */}\n    {/* <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode}/> */}\n    <Alert alert={alert}/>\n    <div className=\"container my-3 \">\n    {/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n         \n          {/* <Route exact path=\"/\"> */}\n          <TextForm  showAlert={showAlert} heading=\"Enter Your Text To Analyze Below\" mode={mode}/>\n          \n          {/* </Route> */}\n    {/* </Switch> */}\n    \n  </div>\n  {/* </Router> */}\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}